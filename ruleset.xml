<?xml version="1.0"?>

<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         name="My rules"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 https://pmd.sourceforge.io/ruleset_2_0_0.xsd">

    <description>
        This ruleset defines the rules that I use in my work.
    </description>

    <!-- Custom -->
    <rule ref="vitalibo/java/design.xml/DependencyInversion"/>

    <rule ref="vitalibo/java/codestyle.xml/AvoidClassName">
        <properties>
            <property name="pattern" value=".*(Utils?|Constants)|Translators?"/>
        </properties>
    </rule>

    <rule ref="vitalibo/java/codestyle.xml/BlacklistClassUsage">
        <properties>
            <property name="classes"
                      value="lombok.experimental.UtilityClass|lombok.experimental.var|lombok.var|lombok.val|org.apache.commons|com.google.common|com.google.gson|com.google.inject"/>
        </properties>
    </rule>

    <!-- Best Practices -->
    <rule ref="category/java/bestpractices.xml/ArrayIsStoredDirectly">
        <properties>
            <property name="allowPrivate" value="true"/>
        </properties>
    </rule>

    <rule ref="category/java/bestpractices.xml/AvoidMessageDigestField"/>

    <rule ref="category/java/bestpractices.xml/AvoidPrintStackTrace"/>

    <rule ref="category/java/bestpractices.xml/AvoidReassigningLoopVariables">
        <properties>
            <property name="foreachReassign" value="deny"/>
            <property name="forReassign" value="skip"/>
        </properties>
    </rule>

    <rule ref="category/java/bestpractices.xml/AvoidReassigningParameters"/>

    <rule ref="category/java/bestpractices.xml/DefaultLabelNotLastInSwitchStmt"/>

    <rule ref="category/java/bestpractices.xml/ForLoopCanBeForeach"/>

    <rule ref="category/java/bestpractices.xml/ForLoopVariableCount">
        <properties>
            <property name="maximumVariables" value="1"/>
        </properties>
    </rule>

    <rule ref="category/java/bestpractices.xml/LiteralsFirstInComparisons"/>

    <rule ref="category/java/bestpractices.xml/LooseCoupling"/>

    <rule ref="category/java/bestpractices.xml/MethodReturnsInternalArray"/>

    <rule ref="category/java/bestpractices.xml/MissingOverride"/>

    <rule ref="category/java/bestpractices.xml/PreserveStackTrace"/>

    <rule ref="category/java/bestpractices.xml/ReplaceEnumerationWithIterator"/>

    <rule ref="category/java/bestpractices.xml/ReplaceHashtableWithMap"/>

    <rule ref="category/java/bestpractices.xml/ReplaceVectorWithList"/>

    <rule ref="category/java/bestpractices.xml/SwitchStmtsShouldHaveDefault"/>

    <rule ref="category/java/bestpractices.xml/SystemPrintln"/>

    <rule ref="category/java/bestpractices.xml/UnusedAssignment">
        <properties>
            <property name="checkUnusedPrefixIncrement" value="false"/>
            <property name="reportUnusedVariables" value="false"/>
        </properties>
    </rule>

    <rule ref="category/java/bestpractices.xml/UnusedImports"/>

    <rule ref="category/java/bestpractices.xml/UnusedLocalVariable"/>

    <rule ref="category/java/bestpractices.xml/UnusedPrivateField">
        <properties>
            <property name="ignoredAnnotations"
                      value="lombok.Setter|lombok.Getter|lombok.Builder|lombok.Data|lombok.RequiredArgsConstructor|lombok.AllArgsConstructor|lombok.Value|lombok.NoArgsConstructor|java.lang.Deprecated|javafx.fxml.FXML|lombok.experimental.Delegate"/>
        </properties>
    </rule>

    <rule ref="category/java/bestpractices.xml/UnusedPrivateMethod">
        <properties>
            <property name="ignoredAnnotations" value="java.lang.Deprecated"/>
        </properties>
    </rule>

    <rule ref="category/java/bestpractices.xml/UseCollectionIsEmpty"/>

    <rule ref="category/java/bestpractices.xml/UseTryWithResources">
        <properties>
            <property name="closeMethods" value="close"/>
        </properties>
    </rule>

    <rule ref="category/java/bestpractices.xml/WhileLoopWithLiteralBoolean"/>

    <!-- Code Style -->
    <rule ref="category/java/codestyle.xml/AvoidDollarSigns"/>

    <rule ref="category/java/codestyle.xml/AvoidProtectedFieldInFinalClass"/>

    <rule ref="category/java/codestyle.xml/AvoidProtectedMethodInFinalClassNotExtending"/>

    <rule ref="category/java/codestyle.xml/BooleanGetMethodName">
        <properties>
            <property name="checkParameterizedMethods" value="false"/>
        </properties>
    </rule>

    <rule ref="category/java/codestyle.xml/ClassNamingConventions">
        <properties>
            <property name="classPattern" value="[A-Z][a-zA-Z0-9]*"/>
            <property name="abstractClassPattern" value="[A-Z][a-zA-Z0-9]*"/>
            <property name="interfacePattern" value="[A-Z][a-zA-Z0-9]*"/>
            <property name="enumPattern" value="[A-Z][a-zA-Z0-9]*"/>
            <property name="annotationPattern" value="[A-Z][a-zA-Z0-9]*"/>
            <property name="utilityClassPattern" value="[A-Z][a-zA-Z0-9]*"/>
        </properties>
    </rule>

    <rule ref="category/java/codestyle.xml/ConfusingTernary">
        <properties>
            <property name="ignoreElseIf" value="true"/>
        </properties>
    </rule>

    <rule ref="category/java/codestyle.xml/ControlStatementBraces">
        <properties>
            <property name="checkIfElseStmt" value="true"/>
            <property name="checkSingleIfStmt" value="true"/>
            <property name="checkWhileStmt" value="true"/>
            <property name="checkForStmt" value="true"/>
            <property name="checkDoWhileStmt" value="true"/>
            <property name="checkCaseStmt" value="false"/>
            <property name="allowEmptyLoop" value="false"/>
        </properties>
    </rule>

    <rule ref="category/java/codestyle.xml/DontImportJavaLang"/>

    <rule ref="category/java/codestyle.xml/DuplicateImports"/>

    <rule ref="category/java/codestyle.xml/ExtendsObject"/>

    <rule ref="category/java/codestyle.xml/FieldNamingConventions">
        <properties>
            <property name="publicConstantPattern" value="[A-Z][A-Z_0-9]*"/>
            <property name="constantPattern" value="[a-zA-Z][a-zA-Z_0-9]*"/>
            <property name="enumConstantPattern" value="[A-Z][a-zA-Z_0-9]*"/>
            <property name="finalFieldPattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="staticFieldPattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="defaultFieldPattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="exclusions" value=""/>
        </properties>
    </rule>

    <rule ref="category/java/codestyle.xml/ForLoopShouldBeWhileLoop"/>

    <rule ref="category/java/codestyle.xml/FormalParameterNamingConventions">
        <properties>
            <property name="methodParameterPattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="finalMethodParameterPattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="lambdaParameterPattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="explicitLambdaParameterPattern" value="[a-z][a-zA-Z0-9]*"/>
        </properties>
    </rule>

    <rule ref="category/java/codestyle.xml/IdenticalCatchBranches"/>

    <rule ref="category/java/codestyle.xml/LinguisticNaming">
        <properties>
            <property name="ignoredAnnotations" value="java.lang.Override"/>
            <property name="checkBooleanMethod" value="true"/>
            <property name="checkGetters" value="true"/>
            <property name="checkSetters" value="true"/>
            <property name="checkPrefixedTransformMethods" value="true"/>
            <property name="checkTransformMethods" value="false"/>
            <property name="booleanMethodPrefixes" value="is|has|can|have|will|should"/>
            <property name="transformMethodNames" value="as|to|from"/>
            <property name="checkFields" value="true"/>
            <property name="checkVariables" value="true"/>
            <property name="booleanFieldPrefixes" value="is|has|can|have|will|should"/>
        </properties>
    </rule>

    <rule ref="category/java/codestyle.xml/LocalVariableNamingConventions">
        <properties>
            <property name="localVarPattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="finalVarPattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="catchParameterPattern" value="[a-z][a-zA-Z0-9]*"/>
        </properties>
    </rule>

    <rule ref="category/java/codestyle.xml/MethodNamingConventions">
        <properties>
            <property name="methodPattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="staticPattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="nativePattern" value="[a-z][a-zA-Z0-9]*"/>
        </properties>
    </rule>

    <rule ref="category/java/codestyle.xml/NoPackage"/>

    <rule ref="category/java/codestyle.xml/PackageCase"/>

    <rule ref="category/java/codestyle.xml/PrematureDeclaration"/>

    <rule ref="category/java/codestyle.xml/ShortClassName">
        <properties>
            <property name="minimum" value="3"/>
        </properties>
    </rule>

    <rule ref="category/java/codestyle.xml/ShortMethodName">
        <properties>
            <property name="minimum" value="2"/>
        </properties>
    </rule>

    <rule ref="category/java/codestyle.xml/UnnecessaryCast"/>

    <rule ref="category/java/codestyle.xml/UnnecessaryConstructor">
        <properties>
            <property name="ignoredAnnotations" value="javax.inject.Inject"/>
        </properties>
    </rule>

    <rule ref="category/java/codestyle.xml/UnnecessaryFullyQualifiedName"/>

    <rule ref="category/java/codestyle.xml/UnnecessaryLocalBeforeReturn">
        <properties>
            <property name="statementOrderMatters" value="true"/>
        </properties>
    </rule>

    <rule ref="category/java/codestyle.xml/UnnecessaryModifier"/>

    <rule ref="category/java/codestyle.xml/UnnecessaryReturn"/>

    <rule ref="category/java/codestyle.xml/UseDiamondOperator">
        <properties>
            <property name="java7Compatibility" value="false"/>
        </properties>
    </rule>

    <rule ref="category/java/codestyle.xml/UselessParentheses"/>

    <rule ref="category/java/codestyle.xml/UselessQualifiedThis"/>

    <rule ref="category/java/codestyle.xml/UseShortArrayInitializer"/>

    <!-- Design -->
    <rule ref="category/java/design.xml/AvoidDeeplyNestedIfStmts">
        <properties>
            <property name="problemDepth" value="3"/>
        </properties>
    </rule>

    <rule ref="category/java/design.xml/AvoidThrowingNewInstanceOfSameException"/>

    <rule ref="category/java/design.xml/AvoidUncheckedExceptionsInSignatures"/>

    <rule ref="category/java/design.xml/DataClass"/>

    <rule ref="category/java/design.xml/DoNotExtendJavaLangError"/>

    <rule ref="category/java/design.xml/ExcessiveClassLength">
        <properties>
            <property name="minimum" value="500.0"/>
        </properties>
    </rule>

    <rule ref="category/java/design.xml/ExcessiveMethodLength">
        <properties>
            <property name="minimum" value="80.0"/>
        </properties>
    </rule>

    <rule ref="category/java/design.xml/ExcessiveParameterList">
        <properties>
            <property name="minimum" value="5.0"/>
        </properties>
    </rule>

    <rule ref="category/java/design.xml/ExcessivePublicCount">
        <properties>
            <property name="minimum" value="45.0"/>
        </properties>
    </rule>

    <rule ref="category/java/design.xml/FinalFieldCouldBeStatic"/>

    <rule ref="category/java/design.xml/GodClass"/>

    <rule ref="category/java/design.xml/ImmutableField">
        <properties>
            <property name="ignoredAnnotations"
                      value="lombok.Setter|lombok.Getter|lombok.Builder|lombok.Data|lombok.RequiredArgsConstructor|lombok.AllArgsConstructor|lombok.Value|lombok.NoArgsConstructor"/>
        </properties>
    </rule>

    <rule ref="category/java/design.xml/LogicInversion"/>

    <rule ref="category/java/design.xml/LoosePackageCoupling">
        <properties>
            <property name="packages" value=""/>
            <property name="classes" value=""/>
        </properties>
    </rule>

    <rule ref="category/java/design.xml/NcssCount">
        <properties>
            <property name="methodReportLevel" value="60"/>
            <property name="classReportLevel" value="1500"/>
            <property name="ncssOptions" value=""/>
        </properties>
    </rule>

    <rule ref="category/java/design.xml/SimplifiedTernary"/>

    <rule ref="category/java/design.xml/SimplifyBooleanAssertion"/>

    <rule ref="category/java/design.xml/SimplifyBooleanExpressions"/>

    <rule ref="category/java/design.xml/SimplifyBooleanReturns"/>

    <rule ref="category/java/design.xml/SimplifyConditional"/>

    <rule ref="category/java/design.xml/SingularField">
        <properties>
            <property name="ignoredAnnotations"
                      value="lombok.Setter|lombok.Getter|lombok.Builder|lombok.Data|lombok.RequiredArgsConstructor|lombok.AllArgsConstructor|lombok.Value|lombok.NoArgsConstructor|lombok.experimental.Delegate"/>
            <property name="checkInnerClasses" value="false"/>
            <property name="disallowNotAssignment" value="false"/>
        </properties>
    </rule>

    <rule ref="category/java/design.xml/UselessOverridingMethod">
        <properties>
            <property name="ignoreAnnotations" value="false"/>
        </properties>
    </rule>

    <!-- Documentation -->
    <rule ref="category/java/documentation.xml/CommentContent"
          message="Please don't use the @author annotation, reliable authorship information can already be found in git">
        <properties>
            <property name="disallowedTerms" value="@author"/>
        </properties>
    </rule>

    <!-- Error Prone -->
    <rule ref="category/java/errorprone.xml/AssignmentInOperand">
        <properties>
            <property name="allowIf" value="false"/>
            <property name="allowFor" value="false"/>
            <property name="allowWhile" value="true"/>
            <property name="allowIncrementDecrement" value="true"/>
        </properties>
    </rule>

    <rule ref="category/java/errorprone.xml/AssignmentToNonFinalStatic"/>

    <rule ref="category/java/errorprone.xml/AvoidAssertAsIdentifier"/>

    <rule ref="category/java/errorprone.xml/AvoidBranchingStatementAsLastInLoop">
        <properties>
            <property name="checkBreakLoopTypes" value="for|do|while"/>
            <property name="checkContinueLoopTypes" value="for|do|while"/>
            <property name="checkReturnLoopTypes" value="for|do|while"/>
        </properties>
    </rule>

    <rule ref="category/java/errorprone.xml/AvoidCallingFinalize"/>

    <rule ref="category/java/errorprone.xml/AvoidCatchingThrowable"/>

    <rule ref="category/java/errorprone.xml/AvoidDecimalLiteralsInBigDecimalConstructor"/>

    <rule ref="category/java/errorprone.xml/AvoidEnumAsIdentifier"/>

    <rule ref="category/java/errorprone.xml/AvoidFieldNameMatchingMethodName"/>

    <rule ref="category/java/errorprone.xml/AvoidFieldNameMatchingTypeName"/>

    <rule ref="category/java/errorprone.xml/AvoidInstanceofChecksInCatchClause"/>

    <rule ref="category/java/errorprone.xml/AvoidLosingExceptionInformation"/>

    <rule ref="category/java/errorprone.xml/AvoidMultipleUnaryOperators"/>

    <rule ref="category/java/errorprone.xml/AvoidUsingOctalValues">
        <properties>
            <property name="strict" value="true"/>
        </properties>
    </rule>

    <rule ref="category/java/errorprone.xml/BadComparison"/>

    <rule ref="category/java/errorprone.xml/BrokenNullCheck"/>

    <rule ref="category/java/errorprone.xml/ClassCastExceptionWithToArray"/>

    <rule ref="category/java/errorprone.xml/CloneMethodReturnTypeMustMatchClassName"/>

    <rule ref="category/java/errorprone.xml/CloseResource">
        <properties>
            <property name="closeTargets" value=""/>
            <property name="types"
                      value="java.lang.AutoCloseable,java.sql.Connection,java.sql.Statement,java.sql.ResultSet"/>
            <property name="closeAsDefaultTarget" value="true"/>
            <property name="allowedResourceTypes"
                      value="java.io.ByteArrayOutputStream|java.io.ByteArrayInputStream|java.io.StringWriter|java.io.CharArrayWriter|java.util.stream.Stream|java.util.stream.IntStream|java.util.stream.LongStream|java.util.stream.DoubleStream"/>
        </properties>
    </rule>

    <rule ref="category/java/errorprone.xml/CompareObjectsWithEquals"/>

    <rule ref="category/java/errorprone.xml/DoNotCallGarbageCollectionExplicitly"/>

    <rule ref="category/java/errorprone.xml/DoNotExtendJavaLangThrowable"/>

    <rule ref="category/java/errorprone.xml/DoNotThrowExceptionInFinally"/>

    <rule ref="category/java/errorprone.xml/DontImportSun"/>

    <rule ref="category/java/errorprone.xml/DontUseFloatTypeForLoopIndices"/>

    <rule ref="category/java/errorprone.xml/EmptyCatchBlock">
        <properties>
            <property name="allowCommentedBlocks" value="false"/>
            <property name="allowExceptionNameRegex" value="^(ignored|expected)$"/>
        </properties>
    </rule>

    <rule ref="category/java/errorprone.xml/EmptyFinalizer"/>

    <rule ref="category/java/errorprone.xml/EmptyFinallyBlock"/>

    <rule ref="category/java/errorprone.xml/EmptyIfStmt"/>

    <rule ref="category/java/errorprone.xml/EmptyInitializer"/>

    <rule ref="category/java/errorprone.xml/EmptyStatementBlock"/>

    <rule ref="category/java/errorprone.xml/EmptyStatementNotInLoop"/>

    <rule ref="category/java/errorprone.xml/EmptySwitchStatements"/>

    <rule ref="category/java/errorprone.xml/EmptySynchronizedBlock"/>

    <rule ref="category/java/errorprone.xml/EmptyTryBlock"/>

    <rule ref="category/java/errorprone.xml/EqualsNull"/>

    <rule ref="category/java/errorprone.xml/IdempotentOperations"/>

    <rule ref="category/java/errorprone.xml/ImportFromSamePackage"/>

    <rule ref="category/java/errorprone.xml/InstantiationToGetClass"/>

    <rule ref="category/java/errorprone.xml/JumbledIncrementer"/>

    <rule ref="category/java/errorprone.xml/MethodWithSameNameAsEnclosingClass"/>

    <rule ref="category/java/errorprone.xml/MisplacedNullCheck"/>

    <rule ref="category/java/errorprone.xml/MissingBreakInSwitch"/>

    <rule ref="category/java/errorprone.xml/MissingStaticMethodInNonInstantiatableClass">
        <properties>
            <property name="annotations"
                      value="org.springframework.beans.factory.annotation.Autowired, javax.inject.Inject"/>
        </properties>
    </rule>

    <rule ref="category/java/errorprone.xml/NonCaseLabelInSwitchStatement"/>

    <rule ref="category/java/errorprone.xml/NonStaticInitializer"/>

    <rule ref="category/java/errorprone.xml/OverrideBothEqualsAndHashcode"/>

    <rule ref="category/java/errorprone.xml/ReturnEmptyArrayRatherThanNull"/>

    <rule ref="category/java/errorprone.xml/ReturnFromFinallyBlock"/>

    <rule ref="category/java/errorprone.xml/SimpleDateFormatNeedsLocale"/>

    <rule ref="category/java/errorprone.xml/SingletonClassReturningNewInstance"/>

    <rule ref="category/java/errorprone.xml/StringBufferInstantiationWithChar"/>

    <rule ref="category/java/errorprone.xml/SuspiciousEqualsMethodName"/>

    <rule ref="category/java/errorprone.xml/SuspiciousHashcodeMethodName"/>

    <rule ref="category/java/errorprone.xml/TestClassWithoutTestCases"/>

    <rule ref="category/java/errorprone.xml/UnconditionalIfStatement"/>

    <rule ref="category/java/errorprone.xml/UnnecessaryBooleanAssertion"/>

    <rule ref="category/java/errorprone.xml/UnnecessaryCaseChange"/>

    <rule ref="category/java/errorprone.xml/UnnecessaryConversionTemporary"/>

    <rule ref="category/java/errorprone.xml/UseCorrectExceptionLogging"/>

    <rule ref="category/java/errorprone.xml/UseEqualsToCompareStrings"/>

    <rule ref="category/java/errorprone.xml/UselessOperationOnImmutable"/>

    <rule ref="category/java/errorprone.xml/UseProperClassLoader"/>

    <!-- Multithreading -->
    <rule ref="category/java/multithreading.xml/DontCallThreadRun"/>

    <rule ref="category/java/multithreading.xml/NonThreadSafeSingleton">
        <properties>
            <property name="checkNonStaticMethods" value="true"/>
            <property name="checkNonStaticFields" value="false"/>
        </properties>
    </rule>

    <rule ref="category/java/multithreading.xml/UnsynchronizedStaticFormatter">
        <properties>
            <property name="allowMethodLevelSynchronization" value="false"/>
        </properties>
    </rule>

    <!-- Performance -->
    <rule ref="category/java/performance.xml/AddEmptyString"/>

    <rule ref="category/java/performance.xml/AppendCharacterWithChar"/>

    <rule ref="category/java/performance.xml/AvoidArrayLoops"/>

    <rule ref="category/java/performance.xml/AvoidUsingShortType"/>

    <rule ref="category/java/performance.xml/BooleanInstantiation"/>

    <rule ref="category/java/performance.xml/ByteInstantiation"/>

    <rule ref="category/java/performance.xml/ConsecutiveLiteralAppends">
        <properties>
            <property name="threshold" value="1"/>
        </properties>
    </rule>

    <rule ref="category/java/performance.xml/InefficientStringBuffering"/>

    <rule ref="category/java/performance.xml/InsufficientStringBufferDeclaration"/>

    <rule ref="category/java/performance.xml/IntegerInstantiation"/>

    <rule ref="category/java/performance.xml/LongInstantiation"/>

    <rule ref="category/java/performance.xml/OptimizableToArrayCall"/>

    <rule ref="category/java/performance.xml/RedundantFieldInitializer"/>

    <rule ref="category/java/performance.xml/ShortInstantiation"/>

    <rule ref="category/java/performance.xml/StringInstantiation"/>

    <rule ref="category/java/performance.xml/StringToString"/>

    <rule ref="category/java/performance.xml/UnnecessaryWrapperObjectCreation"/>

    <rule ref="category/java/performance.xml/UseArrayListInsteadOfVector"/>

    <rule ref="category/java/performance.xml/UseArraysAsList"/>

    <rule ref="category/java/performance.xml/UseIndexOfChar"/>

    <rule ref="category/java/performance.xml/UselessStringValueOf"/>

    <rule ref="category/java/performance.xml/UseStringBufferForStringAppends"/>

    <rule ref="category/java/performance.xml/UseStringBufferLength"/>

    <!-- Security -->
    <rule ref="category/java/security.xml/HardCodedCryptoKey"/>

    <rule ref="category/java/security.xml/InsecureCryptoIv"/>

</ruleset>